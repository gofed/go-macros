# Copyright (c) 2015-2018 Jan Chaloupka <jchaloup@redhat.com>,
#                         Nicolas Mailhot <nim@fedoraproject.org>
# This file is distributed under the terms of GNU GPL license version 3, or
# any later version.
#
# This file contains macros needed at %%build %%install and %%check
# stage by Golang packages.
# The macros necessary at %%setup and srpm stage are in the sister file
# macros.go-srpm

# Default filtering policy
# Complete or replace the following variables in your spec file if this policy
# does not apply to your project

# Flags to filter examples
# The average Go project example code is incomplete and obsolete. It will
# fail to compile as-is, or even panic. It will poison the dependency
# generator with bogus or legacy import path requirements. Even when it it
# clean and up to date, it will require many third party components not needed
# in production. Therefore:
# – never install Go project example code in %%{gopath}. Publish is as %%doc.
# — ask politely projects that publish example code in some other directory
#   than _examples to rename it.
# – never rely on third party examples being available or working in another
#   project. This is *not* production code. Ask upstreams politely to remove
#   tests or code that import other project examples.
%goignoreflags_examples -r '.*example.*'

# Default flags to apply in all stages
%godefaultflags %{goignoreflags_examples}

# Default flags to apply in Go install (%%goinstall)
%goinstallflags %{godefaultflags}

# Default flags to apply in Go checks (%%gochecks)
%gochecksflags  %{godefaultflags}

# Default flags to apply in Go autoprovides
%goprovflags    %{godefaultflags}

# Default flags to apply in Go autorequires
%goreqflags     %{godefaultflags}

# Create a local Go build root
#
# The -i <go import path> allows working on another import path than the
# default %%{goipath} (can not be repeated).
#
# The -s <sourcedir> argument allows building from another location than the
# current directory.
#
# The -b <builddir> argument allows specifying the script build directory (by
# default "$PWD/_build").
%gobuildroot(i:b:s:) %{expand:
  %{?-i*:goipath="%{-i*}"}
  %{?-b*:GO_BUILD_PATH="%{-b*}"}
  %{?-s*:sourcedir="%{-s*}"}
  goipath="${goipath:-%{goipath}}"
  GO_BUILD_PATH="${GO_BUILD_PATH:-${PWD}/_build}"
  %global gobuildpath "$GO_BUILD_PATH"
  if [[ ! -e  "%{gobuildpath}/src/${goipath}" ]] ; then
    install -m 0755 -vd "$(dirname %{gobuildpath}/src/${goipath})"
    ln -fs "${sourcedir:-$PWD}"   "%{gobuildpath}/src/${goipath}"
  fi
  cd "%{gobuildpath}/src/${goipath}"
  install -m 0755 -vd _bin
  export PATH="${PWD}/_bin${PATH:+:${PATH}}"
  export GOPATH="%{gobuildpath}:%{gopath}"
  export LDFLAGS="${LDFLAGS:-}%{?commit: -X ${goipath}/version.commit=%{commit}}%{?tag: -X ${goipath}/version.tag=%{tag}}%{?version: -X ${goipath}/version=%{version}}"
}

# The default filelist name generated by %%goinstall
%gofilelist devel.file-list

# Try to install Go package files in sensible locations, with strict directory
# ownership and lockfile creation as required by Go autodeps.
#
# %%goinstall will install files found in the current directory to the default
# spec import path (%%goipath}) or, if passed one or several -i <import path >
# arguments, will install to the specified import pathes.
#
# The -s <sourcedir> argument allows installing from another location than the
# current directory.
#
# The -b <builddir> argument allows specifying the script build directory (by
# default "$PWD/_build").
#
# %%goinstall will identify by itself Go language native files and directories
# that need installing. In case a project uses other kind of files, you can ask
# to install the corresponding file extensions using the -e flag one or several
# times.
#
# Alternatively, you can pass directly the corresponding files as argument to
# %%goinstall.
#
# %%goinstall accepts the following arguments to exclude elements from
# processing:
# -d <directory>  a directory, relative to the import path root
#                 not recursive (subdirectories are not excluded)
# -t <tree root>  a subtree root, relative to the import path root
#                 recursive (subdirectories are excluded)
# -r <regexp>     a regexp, relative to the import path root
#
# %%goinstall will generate a file list that can be used in a %%files spec
# section. The default file list name matches the %%{goname} of the installed
# import path: %%{goname}-devel.file-list. You can override this using the -o
# argument with another filename (strongly recommended when processing multiple
# import pathes).
#
# When invoked several times with the same import pathit will append to
# existing file lists not create a new one.
#
# When invoked several times with different file list names, it will attribute
# directories to the first file list that makes use of them only.
%goinstall(i:p:g:b:d:t:r:e:s:o:) %{expand:%{lua:
local  maingoipath = rpm.expand("%{goipath}")
local othergoipath = rpm.expand("%{?-i*}")
local       output = rpm.expand("%{?-o*}")
local    sourcedir = rpm.expand("%{?-s*}")
local    buildpath = rpm.expand("%{?-b*}")
local outputprefix = ""
if    (sourcedir == "") then sourcedir = "${PWD}" end
if    (buildpath == "") then buildpath = "${PWD}/_build" end
if (othergoipath ~= "") then
  outputprefix = rpm.expand("%gorpmname " .. othergoipath) .. "-"
  local i
  local subdir
  subdir, i = string.gsub(othergoipath, "^" .. maingoipath, "")
  if (i == 1) then sourcedir = sourcedir .. subdir end
end
if (othergoipath == "") then othergoipath = maingoipath end
if       (output == "") then output = outputprefix .. rpm.expand("%{gofilelist}") end
local command = 'go-rpm-integration install'
command = command .. ' -i ' .. othergoipath
command = command .. ' %{?**}'
command = command .. ' -s ' .. sourcedir
command = command .. ' -b ' .. buildpath
command = command .. ' -o ' .. output
command = command .. ' %{!?-p*:-p %{buildroot}} %{!?-g*:-g %{gopath}}'
command = command .. ' %{?goinstallflags}'
print(command)}}

# Run go test %{gotestflags} on all subdirectories except for those filtered out
# THIS MACRO IS OPT-OUT.
#
# %%gotest will process the default spec import path (%%goipath}) or, if passed
# one or several -i <import path > arguments, will process the specified import
# pathes.
#
# It targets by default files found in "$PWD/_build/src/%{goipath}". This
# directory will have been created during %build or %install if you used the
# other macros with their default flags. Use -b <directory> to override.
#
# Alternatively, use the -s switch to process files the package installed in
# %{gopath} (not recommended, as that requires deploying to other packages many
# test and testdata files with complex dependencies and uneven quality).
#
# It accepts the following arguments to exclude elements from
# processing:
# -d <directory>  a directory, relative to the import path root
#                 not recursive (subdirectories are not excluded)
# -t <tree root>  a subtree root, relative to the import path root
#                 recursive (subdirectories are excluded)
# -r <regexp>     a regexp, relative to the import path root
%gochecks(i:sp:g:wb:d:t:r:) %{expand:
PATH="${PWD}/_bin${PATH:+:${PATH}}" \\
%{?gotestflags:GO_TEST_FLAGS="%{gotestflags}"} \\
%{?gotestextldflags:GO_TEST_EXT_LD_FLAGS="%{gotestextldflags}"} \\
go-rpm-integration check %{!?-i*:-i %{goipath}} %{!?-p*:-p %{buildroot}} \\
                         %{!?-g*:-g %{gopath}} %{!?-b*:-b "$PWD/_build"} %{?**} %{?gochecksflags}
}
